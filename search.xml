<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字节跳动-后台实习生面试</title>
      <link href="/zi-jie-tiao-dong-hou-tai-shi-xi-sheng-mian-shi/"/>
      <url>/zi-jie-tiao-dong-hou-tai-shi-xi-sheng-mian-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="/zi-jie-tiao-dong-hou-tai-shi-xi-sheng-mian-shi/img1.jpg" alt="字节跳动-后台实习生面试"></p><a id="more"></a><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ul><li>十进制转5禁止</li><li>括号匹配，打印所有的。dfs or 枚举+栈</li><li>杨辉三角求最大，滚动数组，</li></ul><h4 id="专业知识"><a href="#专业知识" class="headerlink" title="专业知识"></a>专业知识</h4><ul><li><p>tcp连接断开</p></li><li><p>mysql引擎 InnoDB</p></li><li><p>InnoDB隔离级别</p></li><li><p>写一个sql语句体现锁的</p></li><li><p>http code状态码介绍</p></li><li><p>tbl_A:三个字段， sno, class, score; 查询每个班级score不及格的人数有多少。sql语句</p></li><li><p>varchar, char的区别</p></li><li><p>一个文件有三列 time ip url空格隔开。linux命令求ip出现次数最多的是哪个awk命令 </p></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{a[<span class="token variable">$2</span>] += 1;} END {for (i in a) print i, a[i];}'</span> log.txt <span class="token operator">|</span> <span class="token function">sort</span> -k 2 <span class="token operator">|</span> <span class="token function">tail</span> -1</code></pre><ul><li>redis欲言又止。最后没问</li></ul><hr><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h4 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h4><ul><li>二叉树层蛇形序遍历</li><li>给一个数字x，只能用这个数字出现的数字，然后求比这个数字大的第一个数字； 12341 -&gt; 13124</li><li>华为软挑，自己的思路和实现，别人的算法实现，有什么区别</li></ul><h4 id="专业"><a href="#专业" class="headerlink" title="专业"></a>专业</h4><ul><li>golang协程，线程，进程的区别</li><li>c++，堆栈</li><li>进程间通信</li></ul><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><ul><li>项目碰到啥问题，咋解决的（可能想问技术方面）</li><li>有啥收获</li><li>实际碰到的sql语句优化</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 后台开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试-滴滴后台开发</title>
      <link href="/mian-shi-di-di-hou-tai-kai-fa/"/>
      <url>/mian-shi-di-di-hou-tai-kai-fa/</url>
      
        <content type="html"><![CDATA[<p><img src="/mian-shi-di-di-hou-tai-kai-fa/img2.jpg" alt="后台开发面试"></p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ol><li>hash， 扩容，查找key；空间不连续怎么办；装填因子；解决冲突</li><li>自己怎么实现map，map底层。c++map和golang map区别。</li><li>排序算法，快排</li><li>map set的区别，底层实现</li></ol><h4 id="网络服务器"><a href="#网络服务器" class="headerlink" title="网络服务器"></a>网络服务器</h4><ol><li>负载均衡算法，requset很多，服务器宕机怎么办</li><li>请求协议http，tcp拥塞控制，握手挥手。http请求过程</li><li>http code含义200 404 500之类的</li></ol><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ol><li>数据库存储结构。mysql，mongodb，redshift，索引</li><li>缓冲队列，cache，redis，</li></ol><h4 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h4><ol><li>继承class成员函数访问权限(private, public, protected)</li><li>虚继承内存分配和释放</li></ol><h4 id="linux-amp-git"><a href="#linux-amp-git" class="headerlink" title="linux &amp; git"></a>linux &amp; git</h4><ol><li>linux，查找日志文件某种属性有多少行，awk命令</li><li>git指令</li></ol><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ol><li>top-k元素，元素重复咋办（位运算）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后台开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeCraft-2019</title>
      <link href="/codecraft-2019/"/>
      <url>/codecraft-2019/</url>
      
        <content type="html"><![CDATA[<p><img src="/codecraft-2019/img1.jpeg" alt="CodeCraft-2019"></p><a id="more"></a><h2 id="华为软件精英挑战赛2019"><a href="#华为软件精英挑战赛2019" class="headerlink" title="华为软件精英挑战赛2019"></a>华为软件精英挑战赛2019</h2><blockquote><p>代码链接(<a href="https://github.com/chierqj/CodeCraft-2019" target="_blank" rel="noopener">https://github.com/chierqj/CodeCraft-2019</a>)</p><ul><li>赛区：西北赛区</li><li>队名：赐我一个天命圈</li><li>名次：初赛（6），复赛（4），决赛32强</li></ul></blockquote><hr><h4 id="前前后大概经历了好几个版本，决赛之前都可以看到地图，所以用了一个线下可以调参的版本。决赛的时候想冲击大奖，导致最后没解开死锁。有点可惜但是没有遗憾。"><a href="#前前后大概经历了好几个版本，决赛之前都可以看到地图，所以用了一个线下可以调参的版本。决赛的时候想冲击大奖，导致最后没解开死锁。有点可惜但是没有遗憾。" class="headerlink" title="前前后大概经历了好几个版本，决赛之前都可以看到地图，所以用了一个线下可以调参的版本。决赛的时候想冲击大奖，导致最后没解开死锁。有点可惜但是没有遗憾。"></a>前前后大概经历了好几个版本，决赛之前都可以看到地图，所以用了一个线下可以调参的版本。决赛的时候想冲击大奖，导致最后没解开死锁。有点可惜但是没有遗憾。</h4><hr><h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>初赛思路比较单纯，没有花里胡哨的东西。<strong>分组发车 + 判题器调参</strong></p><ul><li>根据车辆起终点分布进行分类，将所有车分为5类，分别对应四个方向(假设地图拓扑结构已知，右上，右下，左下，左上，非)  </li><li>前四类车，分别限制道路，比如起终点是右上方向的车辆，只限制走向右向上的道路。由于地图原因，会有这四种方向到不了的车辆，这些车辆归为第五类车，即非</li><li>显然可以得到一个结论，前四类车任意两类车同时存在道路上都必不死锁，因为不会构成环。那么就可以分为三大类 A, B, C</li><li>这三类车之间控制发车顺序和发车间隔进行调参即可。</li><li>每一类进行排序发车策略，大致是 <strong>根号n分组 + 速度优先</strong>，按照速度排序，快车先发原则，分成根号n个块，n表示这一类车的数目。每一个块是同一个发车时间，块和块之间累加一个数字即可。(只要保证慢车不能早于快车即可，根号n比较玄学，实际效果也不错)</li><li>最终解法就是，<strong>预先对每辆车跑dijkstra算法规划路径 + 调参数控制发车间隔</strong>  <h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3>将车辆进行分类控制分组发车，是 <strong>西北赛区‘魃魈魁鬾’</strong> 一个师兄想出来的。在初赛阶段+判题器可以取得一个很好的名次。但是还是觉得没有动态规划路径效果好，并且耗费大量时间写好的判题器只是用来调参数有点浪费，果断在复赛阶段就修改算法了。</li></ul><hr><h2 id="复赛"><a href="#复赛" class="headerlink" title="复赛"></a>复赛</h2><p><strong>均匀发车 + 实时规划 + 回溯解锁</strong></p><h3 id="发车策略"><a href="#发车策略" class="headerlink" title="发车策略"></a>发车策略</h3><p>采用是均匀发车，除去预制车辆之外，每个时间片可以发车的车辆数目x是均匀的，x作为参数根据判题器调整。复赛大致在60-100之间。</p><h3 id="路径规划"><a href="#路径规划" class="headerlink" title="路径规划"></a>路径规划</h3><ul><li>根据实时路况信息跑dijkstra。路权比较玄学 <code>value = (rate + lock_cost) * (100 / channel)</code></li><li>rate表示当前道路占比，lock_cost表示由于死锁在当前道路上累加的权重，channel表示当前道路宽度。也就只有一个rate是基于判题器获取的实时路况。</li><li>基于value加了一个 <strong>绕城高速的策略</strong> 越靠近中心的点觉得使用的越频繁。基于此，将整个道路网格进行分层。最终 <code>value = value / level</code>，最中心level为1，越往外扩展，level越大。效果有显著提升。<blockquote><p>这里贴一下南京大学某大佬的思路，基于流的思想，太强了。</p><pre><code>flow_in = road.vis_countflow_out = sum(channel.lowest_speed)flow_speed = flow_out / flow_invalue = length / flow_speed</code></pre></blockquote></li></ul><p>length       : 路长<br>lowest_speed : min(道路限速，车道的最慢车速)<br>vis_count    : 有多少辆车的答案路径中包含当前道路。动态更新，当有一辆车驶出当前道路时，vis_count–<br>```</p><h3 id="解决死锁"><a href="#解决死锁" class="headerlink" title="解决死锁"></a>解决死锁</h3><ul><li>对于每一次死锁，找到死锁车辆所在的道路。</li><li>对于每条道路，增加死锁权重，lock_cost += x, 0 &lt;= x &lt;= 1.0</li><li>回到p个时间片之前，重新调度车辆。</li><li>死锁的权重只会影响到 T - p 到 T 这个时间段还没有规划路径的车，因此这个p是个玄学参数，复赛采用的是50</li></ul><h3 id="反思-1"><a href="#反思-1" class="headerlink" title="反思"></a>反思</h3><p>抓不到死锁的本质原因，单纯增加道路权重会造成冗余，造成不必要的影响。<br>基于这点，决赛时候，不采用权重影响，采用直接变更道路。</p><hr><h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><p><strong>动态发车 + 实时规划 + 回溯解锁</strong></p><h3 id="发车策略-1"><a href="#发车策略-1" class="headerlink" title="发车策略"></a>发车策略</h3><p>采用的阈值限制发车，每一个时间片根据一个阈值来限制发车数目，超过阈值则不发车。这个阈值是根据道路总长度来设定的。大概是 <strong>道路总长度的百分之八九十左右</strong> 预制车辆不加限制，强行上路。</p><h3 id="路径规划-1"><a href="#路径规划-1" class="headerlink" title="路径规划"></a>路径规划</h3><p>路径规划和复赛没有多大变化，因为解锁采用修改路径(删路)的原则，因此取消了lock_cost这个信息。</p><h3 id="解决死锁-1"><a href="#解决死锁-1" class="headerlink" title="解决死锁"></a>解决死锁</h3><ul><li>对于每一次死锁，找到循环等待的车辆形成的环路。</li><li>对环路的每一条道路x上的所有车辆进行判断，如果这一辆车要驶入的下一条路和当前道路x的死锁车辆要驶入的道路一致，则加入需要修改路径的集合: FIX_CAR_SET</li><li>对于FIX_CAR_SET的每一辆车，修改要驶入的下一条路，并重新规划到终点的路线。eg: 死锁时: 1001-&gt;1002,修改成1001-&gt;1003</li><li>修复完路径之后，回到上一个时间片重新跑判题器即可。</li></ul><h3 id="反思-2"><a href="#反思-2" class="headerlink" title="反思"></a>反思</h3><ul><li>这种方法一定程度上解决死锁问题，但是有可能会导致循环死锁，LOCK_A -&gt; LOCK_B -&gt; LOCK_A -&gt; LOCK_B；原因在于每一次面临死锁，解锁的局面是不变的，因此解锁结果也是不变的。（事实是这种死锁最终卡到了决赛结束）  </li><li>解决方法：<ul><li>死锁限制的驶入路径进行累计，死锁一次，就记录死锁限制驶入的道路</li><li>每一次解锁的时候，历史状态的限制路径也考虑在内。如果因为限制过多导致不能到达终点，那么就对该辆车取消所有限制进行重新规划</li><li>解锁的车变成，在环路上只有成为第一优先级的车辆，才对其进行重新规划(感觉这个很关键，找到了死锁的关键原因) </li></ul></li></ul><p>这种方法是比赛结束后某友校一个队伍说的，没有实现，他们的效果还是很好的。（对他们表示可惜，他们的实力绝对可以进8强的。但是因为版本控制没做好，找不到最优成绩代码，再加上现场分组分到了死亡分组，实在可惜）</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>前前后后经历了50多天，可以说是独自一人完成了整个代码，满满的全是感动和收获。<br>从没有想过自己能走到决赛的赛场上，复赛当前公布四强的时候，感动的眼眶都湿了。<br>我们队由于种种原因，90%的工作量都是我一个人完成的，包括想算法，写代码，关注群动态，段子手等等。</p><hr><p>很感谢女朋友的理解和支持，因为比赛，陪她的时间几乎为零，但是她一直支持和鼓励我，给了我坚持下去的动力。<br>很感谢队友的努力和帮助，我们不是最好的，但是我们一定是最努力的。两个队友都是研二的，顶着导师巨大的压力，还参加比赛，很是不容易。某江姓队友初赛完第二天就被导师安排出差了，复赛前一天才回来，就被我拉着讨论，非常辛苦。决赛ai的部分全部是他手撕的，连着也是熬夜了好几晚上，再次感谢队友的努力。另一个余姓队友天天被导师gank还是坚持不懈的一起讨论想算法，段子也是一个接一个，为这个持久战添加了许多有趣的色彩。<br>很感谢’魃魈魁鬾’刘姓学长，因为之前打了两年ACM就是队友，想法debug什么的都很有默契，所以我们的交流甚至比我和队友还多。没有拿个大奖回来给学长看，也是蛮失落的。<br>很感谢西北赛区’心有多大路有多宽’队伍，最初我的判题器就是和他们一起讨论出来的，各种规则对不上之类的很头疼，一步一步完善最后全部对上了。<br>很感谢江山某大佬和臭皮匠四人组的帮助，当时判题器bug，我们四个队伍判题器都对不上，然后对着log看了一下午终于都解决了。江山某大佬的的思路也给了我很大启发。   </p><hr><p>决赛（游玩）很开心，感谢华为出题组，hr小姐姐们，认识了很多大佬和可爱美丽的小姐姐们。<br>决赛两天行程安排的满满的，虽然坐车快坐吐了，但是吃喝玩耍也是很开心的。<br>最后的庆功晚宴也是成功的灌倒了折磨我们的主题组，峰峰老师和康康老师。灌酒之路还未结束，在西安和康康老师继续喝起。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总而言之，这次比赛是一个很棒很精彩的经历。付出很多，收获也很多。存有可惜，但是没有遗憾。<br>明年再战，西北狼强强强</p>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang多进程并发</title>
      <link href="/golang-duo-jin-cheng-bing-fa/"/>
      <url>/golang-duo-jin-cheng-bing-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前听说什么golang一把梭什么的很厉害，到现在位置也接触golang半个多月时间了，最主要的时间都是在看document，学习语法。golang什么的变量名大小写区分公有私有神马的太坑爹了。。。最近接触到了golang最为称赞的第一个地方：<strong>goroutine</strong>。本篇博客先介绍操作系统中的一些基本语法，然后介绍一下goroutine的美妙之处。</p><a id="more"></a><h3 id="【线程，-进程】；-【多进程，多线程】；-【并发，并行】"><a href="#【线程，-进程】；-【多进程，多线程】；-【并发，并行】" class="headerlink" title="【线程， 进程】； 【多进程，多线程】； 【并发，并行】"></a>【线程， 进程】； 【多进程，多线程】； 【并发，并行】</h3><h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><ol><li>概念<ul><li>线程：是程序执行流的最小单元，是系统独立调度和分配CPU（独立运行）的基本单位。</li><li>进程：是资源分配的基本单位。一个进程包括多个线程</li></ul></li><li>区别<ul><li>线程与资源分配无关，它属于某一个进程，并与进程内的其他线程一起共享进程的资源。</li><li>每个进程都有自己一套独立的资源（数据），供其内的所有线程共享。</li><li>不论是大小，开销线程要更“轻量级”</li><li>一个进程内的线程通信比进程之间的通信更快速，有效。（因为共享变量）</li></ul></li></ol><h3 id="多进程与多线程"><a href="#多进程与多线程" class="headerlink" title="多进程与多线程"></a>多进程与多线程</h3><p>多线程：同一时刻执行多个线程。用浏览器一边下载，一边听歌，一边看视频，一边看网页。。。</p><p>多进程：同时执行多个程序。如，同事运行YY，QQ，以及各种浏览器。</p><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h3><p>并发当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。</p><p>并行：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。</p><p>举个例子：</p><p>并发就是<strong>一个窗口</strong>多条队伍，多条队伍轮流使用资源。</p><p>并行就是<strong>多个窗口</strong>，每个窗口一个队伍，队伍之间并行排队。</p><p><img src="/golang-duo-jin-cheng-bing-fa/img.jpeg" alt="并发&amp;并行"></p><h3 id="gotuntine"><a href="#gotuntine" class="headerlink" title="gotuntine"></a>gotuntine</h3><p>golang语言中，用<strong>go</strong>关键词就可以启动并发程序。</p><p>我们先看一下下面这个简单的例子，在main函数中依次调用了两次loop函数。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>毫无疑问上述代码的运行结果如下:</p><p><code>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</code></p><hr><p>这个时候我们将main函数代码换成如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">go</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>此时loop函数只运行了一次；这是什么原因呢，原来是因为我们的main函数中的第二个<strong>loop()</strong>执行比较快</p><p>在<strong>go loop()</strong>还没有执行的时候，main函数已经运行结束并且退出了。</p><p><code>0 1 2 3 4 5 6 7 8 9</code></p><p>我们可以使用<strong>time.Sleep</strong>设置延时来等待<strong>go loop()</strong>执行，这种做法可行，但是显然是不科学的，如果我的<strong>go loop()</strong>执行很快结束了，而main函数还在等待，这显然是一种资源上的浪费。</p><p>那么如何解决的，我们可以用下面的<strong>信道</strong>来解决这个问题</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">go</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Seoncd<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//停顿一秒</span><span class="token punctuation">}</span></code></pre><hr><h3 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h3><p>信道是什么？简单的来说就是goruntine之间相互通讯的东西。类似Linux中的管道，用来在多个进程之间共享资源。</p><p>先看一下例子</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> chanel <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定义信道类型变量 chanel</span>  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    chanel <span class="token operator">&lt;-</span> msg        <span class="token comment" spellcheck="true">// 存消息 chan &lt;- msg</span>  <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">"Ping"</span><span class="token punctuation">)</span>  msgStr <span class="token operator">:=</span> <span class="token operator">&lt;-</span>chanel    <span class="token comment" spellcheck="true">// 取消息 msg &lt;- chan</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msgStr<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>在上述代码中，我们通过定义<strong>chanel</strong>变量完成了进程间的消息通讯。</p><p>通过存消息和取消息两种方法完成进程间的消息通讯。</p><hr><p>通过这种方式我们可以控制进程的结束时间</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> quit <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  quit <span class="token operator">&lt;-</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">// 进程执行结束，存入消息</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">go</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;-</span> quit        <span class="token comment" spellcheck="true">// 取消息，进程结束</span><span class="token punctuation">}</span></code></pre><p>我们通过<strong>quit</strong>来控制<strong>loop()</strong>的结束时间点，当quit没有取到消息的时候，进程就会阻塞，<strong>main</strong>函数也就无法继续执行。</p><p>如果不用信道来阻塞主线的话，主线就会过早跑完，loop线都没有机会执行、、、</p><p>其实，无缓冲的信道永远不会存储数据，只负责数据的流通，为什么这么讲呢？</p><ul><li>从无缓冲信道取数据，必须要有数据流进来才可以，否则当前线阻塞</li><li>数据流入无缓冲信道, 如果没有其他goroutine来拿走这个数据，那么当前线阻塞</li></ul><p>简单来说就是<strong>必须有消息流入，并且有消息流出，缺一不可，不然会造成死锁</strong></p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>下一篇博客将会介绍一下<strong>死锁</strong>以及<strong>等待多goruntine</strong>的方案</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> 进程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HWM-在线分配算法</title>
      <link href="/hwm-zai-xian-fen-pei-suan-fa/"/>
      <url>/hwm-zai-xian-fen-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在公司接触到的项目需要用到HWM算法，网上看了许多资料，简单说HWM是一种基于概率的贪婪式分配算法。<a href="http://www.flickering.cn/uncategorized/2015/04/%E4%BD%BF%E7%94%A8%E7%AE%80%E6%B4%81%E5%88%86%E9%85%8D%E6%96%B9%E6%A1%88%E7%9A%84%E5%B9%BF%E5%91%8A%E6%8A%95%E6%94%BE/" target="_blank" rel="noopener">算法介绍</a></p><a id="more"></a><h4 id="算法背景"><a href="#算法背景" class="headerlink" title="算法背景"></a>算法背景</h4><ul><li>广告投放</li><li>在线分配</li><li>最大量分配</li></ul><h4 id="Problem-example"><a href="#Problem-example" class="headerlink" title="Problem example"></a>Problem example</h4><p>某广告主有三份广告订单，定向分别为</p><ol><li>{北京， 上海， 上海}； 400cpm</li><li>{北京， 广州， 深圳}， {女} 300cpm</li><li>{女} 500cpm</li></ol><p>用户流量各种各样，覆盖不同的维度。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>合并定向条件，生成最小互斥散列</li><li>构造二分图</li><li>分配算法</li></ol><p>这里我们详细介绍一下第1步，第2,3步可以在前言的链接里理解。</p><h5 id="最小互斥散列"><a href="#最小互斥散列" class="headerlink" title="最小互斥散列"></a>最小互斥散列</h5><p>简单来说就是有多个集合，求最少的集合个数，使得每个集合互不相交。</p><p>上述问题每个维度的最小互斥散列如图：</p><p><img src="/hwm-zai-xian-fen-pei-suan-fa/img.png" alt="最小互斥散列"></p><h6 id="supply"><a href="#supply" class="headerlink" title="supply"></a>supply</h6><p>supply为上图的生成候选节点，计算方式是将不同的维度做笛卡尔积。</p><h5 id="匹配原则"><a href="#匹配原则" class="headerlink" title="匹配原则"></a>匹配原则</h5><p>显然只要某条supply满足广告的定向要求(demand)，就可以在二分图上构造邻接边。</p><p>那么条件就是，对于任意维度i，如果某条supply_x满足</p><ul><li>维度i在supply中但是不在demand中</li><li>维度i同时在supply和demand并且supply每个维度下的value存在demand中</li></ul><p>下面使用go简单实现的代码</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> querylocktool<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"strconv"</span>    <span class="token string">"strings"</span>    <span class="token string">"github.com/golang/glog"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dailyAds <span class="token operator">*</span>DailyAds<span class="token punctuation">)</span> <span class="token function">getTagSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    tagSet <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ad <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>dailyAds <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> target <span class="token operator">:=</span> <span class="token keyword">range</span> ad<span class="token punctuation">.</span>Targets <span class="token punctuation">{</span>            targetName <span class="token operator">:=</span> target<span class="token punctuation">.</span>TargetName            tagSet<span class="token punctuation">[</span>targetName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tagSet<span class="token punctuation">[</span>targetName<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>TargetValues<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tagSet<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">createEachSmallest</span><span class="token punctuation">(</span>values <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> simpleSet <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token keyword">var</span> eachSmallest <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    usedValue <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span>    fatherValue <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    sonValue <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> id<span class="token punctuation">,</span> valueSet <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> valueSet <span class="token punctuation">{</span>            fatherValue<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> fatherValue<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span>usedValue<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token punctuation">{</span>                simpleSet <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>simpleSet<span class="token punctuation">,</span> value<span class="token punctuation">)</span>                usedValue<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> values <span class="token operator">:=</span> <span class="token keyword">range</span> fatherValue <span class="token punctuation">{</span>        sonValue<span class="token punctuation">[</span>values<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sonValue<span class="token punctuation">[</span>values<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> values <span class="token operator">:=</span> <span class="token keyword">range</span> sonValue <span class="token punctuation">{</span>        eachSmallest <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>eachSmallest<span class="token punctuation">,</span> values<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    eachSmallest <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>eachSmallest<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"not"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> eachSmallest<span class="token punctuation">,</span> simpleSet<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CreateSmallestSet for DailyAds</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dailyAds <span class="token operator">*</span>DailyAds<span class="token punctuation">)</span> <span class="token function">CreateSmallestSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>SmallestSet<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tagSet <span class="token operator">:=</span> dailyAds<span class="token punctuation">.</span><span class="token function">getTagSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> smallestSet <span class="token punctuation">[</span><span class="token punctuation">]</span>SmallestSet    simpleTagSet <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> values <span class="token operator">:=</span> <span class="token keyword">range</span> tagSet <span class="token punctuation">{</span>        eachSmallest<span class="token punctuation">,</span> simpleSet <span class="token operator">:=</span> <span class="token function">createEachSmallest</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>        smallestSet <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>smallestSet<span class="token punctuation">,</span> SmallestSet<span class="token punctuation">{</span>key<span class="token punctuation">,</span> eachSmallest<span class="token punctuation">}</span><span class="token punctuation">)</span>        simpleTagSet<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> simpleSet    <span class="token punctuation">}</span>    <span class="token keyword">return</span> smallestSet<span class="token punctuation">,</span> simpleTagSet<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// MarkIDForSmallestSet  smallest -> id</span><span class="token keyword">func</span> <span class="token function">MarkIDForSmallestSet</span><span class="token punctuation">(</span>smallestSet <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>SmallestSet<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    maxMapID <span class="token operator">:=</span> <span class="token number">0</span>    markToInt <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    markToKey <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    markToValues <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> sets <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>smallestSet <span class="token punctuation">{</span>        key <span class="token operator">:=</span> sets<span class="token punctuation">.</span>DimName        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> set <span class="token operator">:=</span> <span class="token keyword">range</span> sets<span class="token punctuation">.</span>DimValue <span class="token punctuation">{</span>            maxMapID<span class="token operator">++</span>            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> set <span class="token punctuation">{</span>                markToInt<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>key<span class="token punctuation">,</span> value<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> maxMapID                markToKey<span class="token punctuation">[</span>maxMapID<span class="token punctuation">]</span> <span class="token operator">=</span> key                markToValues<span class="token punctuation">[</span>maxMapID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>markToValues<span class="token punctuation">[</span>maxMapID<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> markToInt<span class="token punctuation">,</span> markToKey<span class="token punctuation">,</span> markToValues<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CreateDistinctOrderSearch distinct ordersearch</span><span class="token keyword">func</span> <span class="token function">CreateDistinctOrderSearch</span><span class="token punctuation">(</span>orderSearch <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> str <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>orderSearch <span class="token punctuation">{</span>        flag <span class="token operator">:=</span> <span class="token boolean">false</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> order <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">{</span>            <span class="token keyword">if</span> str <span class="token operator">==</span> order <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token operator">!</span>flag <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> str<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">resursion</span><span class="token punctuation">(</span>cpStrInfo <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> dep <span class="token builtin">int</span><span class="token punctuation">,</span> top <span class="token builtin">int</span><span class="token punctuation">,</span>    smallestSet <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>SmallestSet<span class="token punctuation">,</span> markToInt <span class="token operator">*</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> cpStr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> dep <span class="token operator">>=</span> top <span class="token punctuation">{</span>        <span class="token operator">*</span>cpStrInfo <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>cpStrInfo<span class="token punctuation">,</span> cpStr<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    key <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>smallestSet<span class="token punctuation">)</span><span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">.</span>DimName    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>smallestSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">.</span>DimValue <span class="token punctuation">{</span>        nowCpStr <span class="token operator">:=</span> cpStr <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>markToInt<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>key<span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> dep <span class="token operator">!=</span> top<span class="token number">-1</span> <span class="token punctuation">{</span>            nowCpStr <span class="token operator">=</span> nowCpStr <span class="token operator">+</span> <span class="token string">";"</span>        <span class="token punctuation">}</span>        <span class="token function">resursion</span><span class="token punctuation">(</span>cpStrInfo<span class="token punctuation">,</span> dep<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> top<span class="token punctuation">,</span> smallestSet<span class="token punctuation">,</span> markToInt<span class="token punctuation">,</span> nowCpStr<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CreateCartesianProduct return string CartesianProduct or empty []string</span><span class="token keyword">func</span> <span class="token function">CreateCartesianProduct</span><span class="token punctuation">(</span>markToInt <span class="token operator">*</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>    smallestSet <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>SmallestSet<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> cpStrInfo <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    count <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>smallestSet<span class="token punctuation">)</span>    <span class="token function">resursion</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpStrInfo<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> smallestSet<span class="token punctuation">,</span> markToInt<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cpStrInfo<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">match</span><span class="token punctuation">(</span>supply<span class="token punctuation">,</span> demand <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    inDemand <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> demand <span class="token punctuation">{</span>        inDemand<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> supply <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token operator">!</span>inDemand<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">createEachEdge</span><span class="token punctuation">(</span>demand <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Target<span class="token punctuation">,</span> supply <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span>    markToKey <span class="token operator">*</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> markToValues <span class="token operator">*</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    targetMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> target <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>demand <span class="token punctuation">{</span>        targetMap<span class="token punctuation">[</span>target<span class="token punctuation">.</span>TargetName<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">.</span>TargetValues    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> eachSupply <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>supply <span class="token punctuation">{</span>        aryEachSupply <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>eachSupply<span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">)</span>        flag <span class="token operator">:=</span> <span class="token boolean">true</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> subEachSupply <span class="token operator">:=</span> <span class="token keyword">range</span> aryEachSupply <span class="token punctuation">{</span>            intNum<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>subEachSupply<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                glog<span class="token punctuation">.</span><span class="token function">Errorln</span><span class="token punctuation">(</span><span class="token string">"string to int falied"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            key <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>markToKey<span class="token punctuation">)</span><span class="token punctuation">[</span>intNum<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> targetMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>markToValues<span class="token punctuation">)</span><span class="token punctuation">[</span>intNum<span class="token punctuation">]</span><span class="token punctuation">,</span> targetMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> flag <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CreateEdgeFromSupplyToDemand create edge from supply -> demand</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dailyAds <span class="token operator">*</span>DailyAds<span class="token punctuation">)</span> <span class="token function">CreateEdgeFromSupplyToDemand</span><span class="token punctuation">(</span>cpStrInfo <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span>    markToKey <span class="token operator">*</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> markToValues <span class="token operator">*</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    edgeMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ad <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>dailyAds <span class="token punctuation">{</span>        matchAry<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createEachEdge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ad<span class="token punctuation">.</span>Targets<span class="token punctuation">,</span> cpStrInfo<span class="token punctuation">,</span> markToKey<span class="token punctuation">,</span> markToValues<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            glog<span class="token punctuation">.</span><span class="token function">Errorln</span><span class="token punctuation">(</span><span class="token string">"create each edge error"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        edgeMap<span class="token punctuation">[</span>ad<span class="token punctuation">.</span>AdID<span class="token punctuation">]</span> <span class="token operator">=</span> matchAry    <span class="token punctuation">}</span>    <span class="token keyword">return</span> edgeMap<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> querylocktool<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"strconv"</span>    <span class="token string">"strings"</span>    <span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestHWM</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// test input</span>    dailyAds <span class="token operator">:=</span> DailyAds<span class="token punctuation">{</span>        <span class="token operator">&amp;</span>Ad<span class="token punctuation">{</span>            <span class="token number">20180725</span><span class="token punctuation">,</span>            <span class="token number">100000</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token punctuation">]</span>Target<span class="token punctuation">{</span>                Target<span class="token punctuation">{</span>                    <span class="token string">"nation"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"HE"</span><span class="token punctuation">,</span> <span class="token string">"RU"</span><span class="token punctuation">,</span> <span class="token string">"SA"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>Ad<span class="token punctuation">{</span>            <span class="token number">20180725</span><span class="token punctuation">,</span>            <span class="token number">100001</span><span class="token punctuation">,</span>            <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token punctuation">]</span>Target<span class="token punctuation">{</span>                Target<span class="token punctuation">{</span>                    <span class="token string">"nation"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"HE"</span><span class="token punctuation">,</span> <span class="token string">"RU"</span><span class="token punctuation">,</span> <span class="token string">"SD"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                Target<span class="token punctuation">{</span>                    <span class="token string">"adpid"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"mpp1_v3"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>Ad<span class="token punctuation">{</span>            <span class="token number">20180725</span><span class="token punctuation">,</span>            <span class="token number">100002</span><span class="token punctuation">,</span>            <span class="token number">30</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token punctuation">]</span>Target<span class="token punctuation">{</span>                Target<span class="token punctuation">{</span>                    <span class="token string">"adpid"</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"mpp1_v3"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// algorithm</span>    smallestSet<span class="token punctuation">,</span> simpleTagSet <span class="token operator">:=</span> dailyAds<span class="token punctuation">.</span><span class="token function">CreateSmallestSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    markToInt<span class="token punctuation">,</span> markToKey<span class="token punctuation">,</span> markToValues <span class="token operator">:=</span> <span class="token function">MarkIDForSmallestSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>smallestSet<span class="token punctuation">)</span>    cpStrInfo <span class="token operator">:=</span> <span class="token function">CreateCartesianProduct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>markToInt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>smallestSet<span class="token punctuation">)</span>    edges<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dailyAds<span class="token punctuation">.</span><span class="token function">CreateEdgeFromSupplyToDemand</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpStrInfo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>markToKey<span class="token punctuation">,</span> <span class="token operator">&amp;</span>markToValues<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// output log</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>simpleTagSet<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> values <span class="token operator">:=</span> <span class="token keyword">range</span> edges <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> id<span class="token punctuation">,</span> supply <span class="token operator">:=</span> <span class="token keyword">range</span> cpStrInfo <span class="token punctuation">{</span>        targetInfo <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>supply<span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">":  "</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> info <span class="token operator">:=</span> <span class="token keyword">range</span> targetInfo <span class="token punctuation">{</span>            intNum<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>markToKey<span class="token punctuation">[</span>intNum<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span> markToValues<span class="token punctuation">[</span>intNum<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -算法 -优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广告系统</title>
      <link href="/guang-gao-xi-tong/"/>
      <url>/guang-gao-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>广告系统往往比其它互联网系统更具商业价值，广告技术赋能商业让投放更智能。</p><a id="more"></a><h3 id="广告系统-寻量锁量控制"><a href="#广告系统-寻量锁量控制" class="headerlink" title="广告系统 - 寻量锁量控制"></a>广告系统 - 寻量锁量控制</h3><h5 id="寻量控制"><a href="#寻量控制" class="headerlink" title="寻量控制"></a>寻量控制</h5><p>广告系统往往会抓取用户的行为信息来预估流量，这一部分叫做日志系统。</p><p>日志系统按天进行更新，定时生成报表，这一部分是寻量的主要来源。</p><h5 id="锁量控制"><a href="#锁量控制" class="headerlink" title="锁量控制"></a>锁量控制</h5><p>锁量控制面向寻量源数据，输入来源为投放端。</p><p>投放端面向广告主，广告主会选取定向以及投放广告id。</p><p>使用合适的在线分配算法能够最大程度上满足广告主的要求。</p><h5 id="HWM算法"><a href="#HWM算法" class="headerlink" title="HWM算法"></a>HWM算法</h5><p>离线的HWM使用了一个简单即非常有效的启发算法来产生分配方案，算法为每个合约j产生一个服务率αj，和一个分配顺序。分配顺序是让满足度低的合约可以有较高的优先权得到更多的可行流量，通过对每个合约仅设置这两个值，HWM算法就创建了一个紧凑，健壮的分配方案。 </p><p>下一篇博客会详细介绍</p>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 广告系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客迁移</title>
      <link href="/bo-ke-qian-yi/"/>
      <url>/bo-ke-qian-yi/</url>
      
        <content type="html"><![CDATA[<p>原来博客记录了一些ACM算法题目结题报告，以后多写写工程</p><ul><li>原博客链接  <a href="http://www.cnblogs.com/Jstyle-continue/" target="_blank" rel="noopener">http://www.cnblogs.com/Jstyle-continue/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> ACM </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 开始 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
