<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HWM-在线分配算法</title>
      <link href="/hwm-zai-xian-fen-pei-suan-fa/"/>
      <url>/hwm-zai-xian-fen-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在公司接触到的项目需要用到HWM算法，网上看了许多资料，简单说HWM是一种基于概率的贪婪式分配算法。<a href="http://www.flickering.cn/uncategorized/2015/04/%E4%BD%BF%E7%94%A8%E7%AE%80%E6%B4%81%E5%88%86%E9%85%8D%E6%96%B9%E6%A1%88%E7%9A%84%E5%B9%BF%E5%91%8A%E6%8A%95%E6%94%BE/" target="_blank" rel="noopener">算法介绍</a></p><a id="more"></a><h4 id="算法背景"><a href="#算法背景" class="headerlink" title="算法背景"></a>算法背景</h4><ul><li>广告投放</li><li>在线分配</li><li>最大量分配</li></ul><h4 id="Problem-example"><a href="#Problem-example" class="headerlink" title="Problem example"></a>Problem example</h4><p>某广告主有三份广告订单，定向分别为</p><ol><li>{北京， 上海， 上海}； 400cpm</li><li>{北京， 广州， 深圳}， {女} 300cpm</li><li>{女} 500cpm</li></ol><p>用户流量各种各样，覆盖不同的维度。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>合并定向条件，生成最小互斥散列</li><li>构造二分图</li><li>分配算法</li></ol><p>这里我们详细介绍一下第1步，第2,3步可以在前言的链接里理解。</p><h5 id="最小互斥散列"><a href="#最小互斥散列" class="headerlink" title="最小互斥散列"></a>最小互斥散列</h5><p>简单来说就是有多个集合，求最少的集合个数，使得每个集合互不相交。</p><p>上述问题每个维度的最小互斥散列如图：</p><p><img src="HWM-%E5%9C%A8%E7%BA%BF%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95/img.png" alt="最小互斥散列"></p><h6 id="supply"><a href="#supply" class="headerlink" title="supply"></a>supply</h6><p>supply为上图的生成候选节点，计算方式是将不同的维度做笛卡尔积。</p><h5 id="匹配原则"><a href="#匹配原则" class="headerlink" title="匹配原则"></a>匹配原则</h5><p>显然只要某条supply满足广告的定向要求(demand)，就可以在二分图上构造邻接边。</p><p>那么条件就是，对于任意维度i，如果某条supply_x满足</p><ul><li>维度i在supply中但是不在demand中</li><li>维度i同时在supply和demand并且supply每个维度下的value存在demand中</li></ul><p>下面使用go简单实现的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> querylocktool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/golang/glog"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dailyAds *DailyAds)</span> <span class="title">getTagSet</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>][][]<span class="title">string</span></span> &#123;</span><br><span class="line">    tagSet := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][][]<span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">for</span> _, ad := <span class="keyword">range</span> *dailyAds &#123;</span><br><span class="line">        <span class="keyword">for</span> _, target := <span class="keyword">range</span> ad.Targets &#123;</span><br><span class="line">            targetName := target.TargetName</span><br><span class="line">            tagSet[targetName] = <span class="built_in">append</span>(tagSet[targetName], target.TargetValues)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tagSet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createEachSmallest</span><span class="params">(values [][]<span class="keyword">string</span>)</span> <span class="params">([][]<span class="keyword">string</span>, []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> simpleSet []<span class="keyword">string</span></span><br><span class="line">    <span class="keyword">var</span> eachSmallest [][]<span class="keyword">string</span></span><br><span class="line">    usedValue := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line">    fatherValue := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    sonValue := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> id, valueSet := <span class="keyword">range</span> values &#123;</span><br><span class="line">        <span class="keyword">for</span> _, value := <span class="keyword">range</span> valueSet &#123;</span><br><span class="line">            fatherValue[value] = fatherValue[value] + strconv.Itoa(id)</span><br><span class="line">            <span class="keyword">if</span> !usedValue[value] &#123;</span><br><span class="line">                simpleSet = <span class="built_in">append</span>(simpleSet, value)</span><br><span class="line">                usedValue[value] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> key, values := <span class="keyword">range</span> fatherValue &#123;</span><br><span class="line">        sonValue[values] = <span class="built_in">append</span>(sonValue[values], key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, values := <span class="keyword">range</span> sonValue &#123;</span><br><span class="line">        eachSmallest = <span class="built_in">append</span>(eachSmallest, values)</span><br><span class="line">    &#125;</span><br><span class="line">    eachSmallest = <span class="built_in">append</span>(eachSmallest, []<span class="keyword">string</span>&#123;<span class="string">"not"</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> eachSmallest, simpleSet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateSmallestSet for DailyAds</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dailyAds *DailyAds)</span> <span class="title">CreateSmallestSet</span><span class="params">()</span> <span class="params">([]SmallestSet, <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    tagSet := dailyAds.getTagSet()</span><br><span class="line">    <span class="keyword">var</span> smallestSet []SmallestSet</span><br><span class="line">    simpleTagSet := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">for</span> key, values := <span class="keyword">range</span> tagSet &#123;</span><br><span class="line">        eachSmallest, simpleSet := createEachSmallest(values)</span><br><span class="line">        smallestSet = <span class="built_in">append</span>(smallestSet, SmallestSet&#123;key, eachSmallest&#125;)</span><br><span class="line">        simpleTagSet[key] = simpleSet</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> smallestSet, simpleTagSet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MarkIDForSmallestSet  smallest -&gt; id</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MarkIDForSmallestSet</span><span class="params">(smallestSet *[]SmallestSet)</span> <span class="params">(<span class="keyword">map</span>[[2]<span class="keyword">string</span>]<span class="keyword">int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>, <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    maxMapID := <span class="number">0</span></span><br><span class="line">    markToInt := <span class="built_in">make</span>(<span class="keyword">map</span>[[<span class="number">2</span>]<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">    markToKey := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">    markToValues := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, sets := <span class="keyword">range</span> *smallestSet &#123;</span><br><span class="line">        key := sets.DimName</span><br><span class="line">        <span class="keyword">for</span> _, set := <span class="keyword">range</span> sets.DimValue &#123;</span><br><span class="line">            maxMapID++</span><br><span class="line">            <span class="keyword">for</span> _, value := <span class="keyword">range</span> set &#123;</span><br><span class="line">                markToInt[[<span class="number">2</span>]<span class="keyword">string</span>&#123;key, value&#125;] = maxMapID</span><br><span class="line">                markToKey[maxMapID] = key</span><br><span class="line">                markToValues[maxMapID] = <span class="built_in">append</span>(markToValues[maxMapID], value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> markToInt, markToKey, markToValues</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateDistinctOrderSearch distinct ordersearch</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateDistinctOrderSearch</span><span class="params">(orderSearch *[]<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result []<span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> _, str := <span class="keyword">range</span> *orderSearch &#123;</span><br><span class="line">        flag := <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> _, order := <span class="keyword">range</span> result &#123;</span><br><span class="line">            <span class="keyword">if</span> str == order &#123;</span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !flag &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resursion</span><span class="params">(cpStrInfo *[]<span class="keyword">string</span>, dep <span class="keyword">int</span>, top <span class="keyword">int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    smallestSet *[]SmallestSet, markToInt *<span class="keyword">map</span>[[2]<span class="keyword">string</span>]<span class="keyword">int</span>, cpStr <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> dep &gt;= top &#123;</span><br><span class="line">        *cpStrInfo = <span class="built_in">append</span>(*cpStrInfo, cpStr)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    key := (*smallestSet)[dep].DimName</span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> (*(smallestSet))[dep].DimValue &#123;</span><br><span class="line">        nowCpStr := cpStr + strconv.Itoa((*markToInt)[[<span class="number">2</span>]<span class="keyword">string</span>&#123;key, value[<span class="number">0</span>]&#125;])</span><br><span class="line">        <span class="keyword">if</span> dep != top<span class="number">-1</span> &#123;</span><br><span class="line">            nowCpStr = nowCpStr + <span class="string">";"</span></span><br><span class="line">        &#125;</span><br><span class="line">        resursion(cpStrInfo, dep+<span class="number">1</span>, top, smallestSet, markToInt, nowCpStr)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateCartesianProduct return string CartesianProduct or empty []string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateCartesianProduct</span><span class="params">(markToInt *<span class="keyword">map</span>[[2]<span class="keyword">string</span>]<span class="keyword">int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    smallestSet *[]SmallestSet)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cpStrInfo []<span class="keyword">string</span></span><br><span class="line">    count := <span class="built_in">len</span>(*smallestSet)</span><br><span class="line">    resursion(&amp;cpStrInfo, <span class="number">0</span>, count, smallestSet, markToInt, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> cpStrInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">match</span><span class="params">(supply, demand []<span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    inDemand := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> demand &#123;</span><br><span class="line">        inDemand[value] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> supply &#123;</span><br><span class="line">        <span class="keyword">if</span> !inDemand[value] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createEachEdge</span><span class="params">(demand *[]Target, supply *[]<span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    markToKey *<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>, markToValues *<span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    targetMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">for</span> _, target := <span class="keyword">range</span> *demand &#123;</span><br><span class="line">        targetMap[target.TargetName] = target.TargetValues</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, eachSupply := <span class="keyword">range</span> *supply &#123;</span><br><span class="line">        aryEachSupply := strings.Split(eachSupply, <span class="string">";"</span>)</span><br><span class="line">        flag := <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> _, subEachSupply := <span class="keyword">range</span> aryEachSupply &#123;</span><br><span class="line">            intNum, err := strconv.Atoi(subEachSupply)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                glog.Errorln(<span class="string">"string to int falied"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">            &#125;</span><br><span class="line">            key := (*markToKey)[intNum]</span><br><span class="line">            <span class="keyword">if</span> _, ok := targetMap[key]; ok &#123;</span><br><span class="line">                <span class="keyword">if</span> !match((*markToValues)[intNum], targetMap[key]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> flag &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateEdgeFromSupplyToDemand create edge from supply -&gt; demand</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dailyAds *DailyAds)</span> <span class="title">CreateEdgeFromSupplyToDemand</span><span class="params">(cpStrInfo *[]<span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    markToKey *<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>, markToValues *<span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">map</span>[<span class="keyword">uint64</span>][]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    edgeMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">uint64</span>][]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">for</span> _, ad := <span class="keyword">range</span> *dailyAds &#123;</span><br><span class="line">        matchAry, err := createEachEdge(&amp;ad.Targets, cpStrInfo, markToKey, markToValues)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Errorln(<span class="string">"create each edge error"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        edgeMap[ad.AdID] = matchAry</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> edgeMap, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> querylocktool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHWM</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="comment">// test input</span></span><br><span class="line">    dailyAds := DailyAds&#123;</span><br><span class="line">        &amp;Ad&#123;</span><br><span class="line">            <span class="number">20180725</span>,</span><br><span class="line">            <span class="number">100000</span>,</span><br><span class="line">            <span class="number">10</span>,</span><br><span class="line">            []Target&#123;</span><br><span class="line">                Target&#123;</span><br><span class="line">                    <span class="string">"nation"</span>, []<span class="keyword">string</span>&#123;<span class="string">"HE"</span>, <span class="string">"RU"</span>, <span class="string">"SA"</span>&#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &amp;Ad&#123;</span><br><span class="line">            <span class="number">20180725</span>,</span><br><span class="line">            <span class="number">100001</span>,</span><br><span class="line">            <span class="number">20</span>,</span><br><span class="line">            []Target&#123;</span><br><span class="line">                Target&#123;</span><br><span class="line">                    <span class="string">"nation"</span>, []<span class="keyword">string</span>&#123;<span class="string">"HE"</span>, <span class="string">"RU"</span>, <span class="string">"SD"</span>&#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                Target&#123;</span><br><span class="line">                    <span class="string">"adpid"</span>, []<span class="keyword">string</span>&#123;<span class="string">"mpp1_v3"</span>&#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &amp;Ad&#123;</span><br><span class="line">            <span class="number">20180725</span>,</span><br><span class="line">            <span class="number">100002</span>,</span><br><span class="line">            <span class="number">30</span>,</span><br><span class="line">            []Target&#123;</span><br><span class="line">                Target&#123;</span><br><span class="line">                    <span class="string">"adpid"</span>,</span><br><span class="line">                    []<span class="keyword">string</span>&#123;<span class="string">"mpp1_v3"</span>&#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// algorithm</span></span><br><span class="line">    smallestSet, simpleTagSet := dailyAds.CreateSmallestSet()</span><br><span class="line">    markToInt, markToKey, markToValues := MarkIDForSmallestSet(&amp;smallestSet)</span><br><span class="line">    cpStrInfo := CreateCartesianProduct(&amp;markToInt, &amp;smallestSet)</span><br><span class="line">    edges, _ := dailyAds.CreateEdgeFromSupplyToDemand(&amp;cpStrInfo, &amp;markToKey, &amp;markToValues)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// output log</span></span><br><span class="line">    fmt.Println(simpleTagSet)</span><br><span class="line">    <span class="keyword">for</span> key, values := <span class="keyword">range</span> edges &#123;</span><br><span class="line">        fmt.Println(key, <span class="string">": "</span>, values)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> id, supply := <span class="keyword">range</span> cpStrInfo &#123;</span><br><span class="line">        targetInfo := strings.Split(supply, <span class="string">";"</span>)</span><br><span class="line">        fmt.Print(id, <span class="string">":  "</span>)</span><br><span class="line">        <span class="keyword">for</span> _, info := <span class="keyword">range</span> targetInfo &#123;</span><br><span class="line">            intNum, err := strconv.Atoi(info)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Print(markToKey[intNum], <span class="string">": "</span>, markToValues[intNum], <span class="string">" "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
